@page "/Thoughts"
@rendermode InteractiveAuto

@using Microsoft.AspNetCore.Components.Web.Virtualization;
@using EricJohansson.Site.Shared.Interfaces.Blog;
@using EricJohansson.Site.Shared.Types.Blog;
@using EricJohansson.Site.Shared.Support;

@inherits CancellableComponentBase;

@inject IThoughtsService _thoughtsService;
@inject ILogger<Thoughts> _logger

<h2>Thoughs</h2>
<div style="height: 500px; overflow-y: scroll;">
    <Virtualize ItemsProvider="LoadThoughts" Context="thought" OverscanCount="5" ItemSize="10">
        <Placeholder>
            @{
                _logger.LogInformation("Rendering placeholder");
            }
            Loading...
        </Placeholder>
        <ItemContent>
            @{
                _logger.LogInformation("Rendering thought {thought.Title}", thought.Title);
            }
            <section class="thought box">
                <h3>@thought.Title</h3>
                @thought.Content
            </section>
        </ItemContent>

    </Virtualize>
</div>
@code {
    private async ValueTask<ItemsProviderResult<FullThoughtDto>> LoadThoughts(
    ItemsProviderRequest request)
    {
        await Task.CompletedTask;
        _logger.LogInformation("Loading thoughts from {startIndex} and loading {count}", request.StartIndex, request.Count);
        var thoughts = _thoughtsService.GetThoughts(request.StartIndex, request.Count, CancellationToken.None);
        var thoughtsList = thoughts.ToBlockingEnumerable(CancellationToken.None).Take(100).ToList();
        int totalThoughts = 100;
        _logger.LogInformation("Retrieved {thoughtCount} thoughts. Pretending we got {thoughts}", request.Count, totalThoughts);
        return new ItemsProviderResult<FullThoughtDto>(thoughtsList, totalThoughts);
    }

}
