@page "/Thoughts"
@inherits CancellableComponentBase

@using EricJohansson.Site.Shared.Blazor;
@using EricJohansson.Site.Shared.Interfaces.Blog;
@using EricJohansson.Site.Shared.Types.Blog;

@inject IThoughtsService _thoughtsService;
@inject ILogger<Thoughts> _logger

<LayoutSetter>
    <HeaderContent>
    </HeaderContent>
</LayoutSetter>

<h2>Thoughs</h2>
<div style="height:500px;overflow-y:scroll">
    <Virtualize Items="@_thoughts" OverscanCount="5">
        <section class="thought box">
            <h3>@context.Title</h3>
            @context.Content
        </section>
    </Virtualize>
</div>
@code {
    List<FullThoughtDto> _thoughts;

    protected override async Task OnInitializedAsync()
    {
        _thoughts = _thoughtsService.GetThoughts(0, 500, CancellationToken.None).ToBlockingEnumerable().ToList();
        StateHasChanged();
    }

    private async ValueTask<ItemsProviderResult<FullThoughtDto>> LoadThoughts(
    ItemsProviderRequest request)
    {
        await Task.CompletedTask;
        _logger.LogError("Loading thoughts from {startIndex} and loading {count}", request.StartIndex, request.Count);
        var thoughts = _thoughtsService.GetThoughts(request.StartIndex, request.Count, CancellationToken.None);
        var thoughtsList = thoughts.ToBlockingEnumerable(CancellationToken.None).ToList();
        _logger.LogError("Retrieved {thoughtCount} thoughts.", thoughtsList.Count);
        return new ItemsProviderResult<FullThoughtDto>(thoughtsList, 500);
    }

}
