@using EricJohansson.Site.Shared.Blazor;
@using EricJohansson.Site.Shared.Interfaces.Blog;
@using EricJohansson.Site.Shared.Types.Blog;

@namespace EricJohansson.Site.Client.Components.Content

@inherits CancellableComponentBase
@inject IMusingService _musingService
@inject NavigationManager _navigationManager

@if (_musingsList == null)
{
    <text>...</text>
}
else
{
    foreach (var musing in _musingsList)
    {
        <section class="musing" @attributes="SetAttributes(musing)">
            <h3>@musing.Title</h3>
            @musing.Summary
            @if (!String.IsNullOrWhiteSpace(musing.Url))
            {
                <div style="text-align: right;">
                    <NavLink href="@($"/musing/{musing.Slug}/")">Tell me more...</NavLink>
                    @*<a @onclick=(_navigationManager.NavigateTo($"/musing/{musing.Slug}/")>Tell me more...</a><br />*@
                    <!--<a href="@($"/musing/{musing.Slug}/")">Tell me more...</a></div>-->
                </div>
            }
        </section>
        @*
        <TelerikCard Class="musing">
            @if (musing.ImageUrl != null)
            {
                <CardHeader>
                    <CardImage Src="@musing.ImageUrl" />
                </CardHeader>
            }
            <CardBody>
                <CardTitle>@musing.Title</CardTitle>
                @musing.Summary
            </CardBody>
        </TelerikCard>*@
    }
}

@code {
    IEnumerable<MusingListEntryDto>? _musingsList = null;

    protected Dictionary<string, object> SetAttributes(MusingListEntryDto musing)
    {
        var attributes = new Dictionary<string, object>();

        if (!String.IsNullOrWhiteSpace(musing.ImageUrl))
        {
            string style = $@"background-image: url('{musing.ImageUrl}');
                background-repeat: no-repeat;
                background-size: 100% 4rem;
                background-style: cover;
                padding-top: 4rem;
                ";
            attributes.Add("style", style);
        }

        return attributes;
    }

    protected void NavigateMusing(MusingListEntryDto musing)
    {
        _navigationManager.NavigateTo($"/musing/{musing.Slug}/");
    }

    protected override async Task OnInitializedAsync()
    {
        var musing = await _musingService.GetFullMusing("1", CancellationToken);
        _musingsList = _musingService.GetLatestMusings(5, CancellationToken).ToBlockingEnumerable(CancellationToken);
    }
}
