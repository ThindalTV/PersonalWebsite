@using EricJohansson.Site.Shared.Blazor;
@using EricJohansson.Site.Shared.Interfaces.Schedule;
@using EricJohansson.Site.Shared.Types.Schedule;

@namespace EricJohansson.Site.Client.Components.Content

@inherits CancellableComponentBase

@inject IAppearanceService _appearanceService
<section style="padding-left: 3rem; padding-right: 3rem;">
    <h2>Where to find me</h2>
    <ul>
        @foreach (AppearanceDto appearance in _appearances)
        {
            string imageUrl = appearance.ImageUrl;
            DateTime localTime = appearance.Time;
            if (String.IsNullOrWhiteSpace(imageUrl))
            {
                switch (appearance.AppearanceType)
                {
                    case AppearanceType.Streaming:
                        imageUrl = "/img/Icons/Streaming.svg";
                        break;
                    case AppearanceType.Speaking:
                        imageUrl = "/img/Icons/Speaking.svg";
                        break;
                    case AppearanceType.Appearance:
                        imageUrl = "/img/Icons/Appearance.svg";
                        break;
                    case AppearanceType.Attending:
                        imageUrl = "/img/Icons/Attending.svg";
                        break;
                    case AppearanceType.Other:
                        imageUrl = "/img/Icons/Other.svg";
                        break;
                    default:
                        throw new InvalidOperationException($"Unknown appearance type: {appearance.AppearanceType}");
                }
            }

            <li>
                <img src="@imageUrl" class="icon" alt="@appearance.Location" />
                <div class="info">
                    <h3 class="title">@appearance.Location</h3>
                    <span class="description">@appearance.Description</span>

                </div>
                <div class="sidebar">
                    <div class="when">
                        @localTime.ToLocalTime().ToShortDateString()
                        @if (appearance.IncludesTime)
                        {
                            <br />
                            @appearance.Time.ToLocalTime().ToString("HH:mm")
                        }
                    </div>
                    @if (!String.IsNullOrWhiteSpace(appearance.Url))
                    {
                        string urlText = appearance.UrlText ?? appearance.Url;
                        <a href="@appearance.Url" target="_blank" rel="noopener" class="url">@urlText</a>
                    }
                </div>
            </li>
        }
    </ul>
</section>
@code {
    protected List<AppearanceDto>? _appearances = new List<AppearanceDto>();

    protected override async Task OnInitializedAsync()
    {
        await foreach (var apperance in _appearanceService.GetNextMonthsAppearances(CancellationToken))
        {
            _appearances.Add(apperance);
            StateHasChanged();
            await Task.CompletedTask;
        }
    }
}
