@using EricJohansson.Site.Shared.Blazor;
@using EricJohansson.Site.Shared.Interfaces.Schedule;
@using EricJohansson.Site.Shared.Types.Schedule;

@namespace EricJohansson.Site.Client.Components.Content

@inherits CancellableComponentBase

@inject IAppearanceService _appearanceService

<ul>
    @if (_appearances == null)
    {
        @for (int i = 0; i < 10; i++)
        {
            <li class="appearance">
                <TelerikSkeleton ShapeType="@SkeletonShapeType.Circle" AnimationType="@SkeletonAnimationType.Wave" Height="5rem" />
            </li>
        }
    }
    else
    {
        @foreach (var appearance in _appearances)
        {
            <li class="appearance">
                <Appearance Instance="@appearance" />
            </li>
        }
    }
</ul>

@code {
    protected List<AppearanceDto>? _appearances;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        _appearances = new List<AppearanceDto>();
        foreach (var apperance in _appearanceService.GetNextMonthsAppearances(CancellationToken).ToBlockingEnumerable(CancellationToken))
        {
            _appearances.Add(apperance);
            await Task.Delay(1000);
            StateHasChanged();
        }
    }
}
